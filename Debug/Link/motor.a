;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x20
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x1C
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x10
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x18
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x14
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x1C
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x08
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0

	.DSEG
;unsigned char step_forward(void);
;unsigned char step_backward(void);
;interrupt [2] void ext_int0_isr(void)
; 0000 0053 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0054 for (i = 0; i < 512; i++)   // 반시계 방향으로 90도 회전
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 0055 {
; 0000 0056 PORTE = step_forward();  // 스텝모터를 뒤로 돌리는 함수 호출
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
; 0000 0057 delay_ms(2);                // 2밀리초 딜레이
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0000 0058 PORTA = 0X00;               // PORTA를 0으로 설정 (LED on)
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0000 0059 }
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
; 0000 005A PORTA = 0XFF;                   // 회전 완료 후 PORTA를 0xFF로 설정 (LED off)
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0000 005B }
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;interrupt [3] void ext_int1_isr(void)
; 0000 005E {
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 0000 005F for (i = 0; i < 512; i++)   // 시계 방향으로 90도 회전
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
; 0000 0060 {
; 0000 0061 PORTE = step_backward();   // 스텝모터를 앞으로 돌리는 함수 호출
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0000 0062 delay_ms(2);                // 2밀리초 딜레이
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
; 0000 0063 PORTB = 0X00;               // PORTB를 0으로 설정 (LED on)
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0000 0064 }
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
; 0000 0065 PORTB = 0XFF;                   // 회전 완료 후 PORTB를 0xFF로 설정 (LED off)
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0000 0066 }
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;unsigned char step_forward(void)
; 0000 0069 {
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 0000 006A step_index++;                  // 스텝 인덱스 증가
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0000 006B if(step_index >= 4)            // 스텝 인덱스가 4 이상이면
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0000 006C step_index = 0;             // 스텝 인덱스를 0으로 초기화
;PCODE: $0000004F VOL: 0
; 0000 006D return step_data[step_index];  // 현재 스텝 데이터 반환
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0000 006E }
;PCODE: $00000055 VOL: 0
;unsigned char step_backward(void)
; 0000 0071 {
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
; 0000 0072 step_index--;                  // 스텝 인덱스 감소
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
; 0000 0073 if(step_index < 0)             // 스텝 인덱스가 0 미만이면
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
; 0000 0074 step_index = 3;             // 스텝 인덱스를 3으로 초기화
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
; 0000 0075 return step_data[step_index];  // 현재 스텝 데이터 반환
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0000 0076 }
;PCODE: $00000064 VOL: 0
;void main(void)
; 0000 0079 {
;PCODE: $00000065 VOL: 0
; 0000 007A DDRA = 0xff;    // PORTA를 출력 모드로 설정
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
; 0000 007B PORTA = 0xff;   // PORTA의 출력을 모두 켜기
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
; 0000 007C 
; 0000 007D DDRB = 0xff;    // PORTB를 출력 모드로 설정
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
; 0000 007E PORTB = 0xff;   // PORTB의 출력을 모두 켜기
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
; 0000 007F 
; 0000 0080 DDRD = 0xfc;    // PORTD의 2번 비트까지 입력 모드, 나머지는 출력 모드로 설정
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
; 0000 0081 //PORTD = 0xff;   // PORTD의 내부 풀업 저항 활성화
; 0000 0082 
; 0000 0083 DDRE = 0xff;    // PORTE를 출력 모드로 설정
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
; 0000 0084 PORTE = 0xff;   // PORTE의 출력을 모두 켜기
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
; 0000 0085 
; 0000 0086 EICRA = 0x00;   // 외부 인터럽트 설정 레지스터 초기화 (하강 에지 0000 1010, 상승 에지 0000 1111, 로우 레벨 0000 0000)
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
; 0000 0087 EIMSK = 0x03;   // 외부 인터럽트 마스크 레지스터 설정 (0000 0011)
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
; 0000 0088 EIFR = 0x03;    // 외부 인터럽트 플래그 레지스터 설정 (0000 0011)
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
; 0000 0089 
; 0000 008A #asm("sei")     // 전역적으로 인터럽트 활성화
;PCODE: $0000007A VOL: 0
; 0000 008B }
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
